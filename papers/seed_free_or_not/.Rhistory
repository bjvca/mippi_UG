setwd("~/data/projects/OneCG/MIPP/endline/data/raw")
##script that produces input for ODK to be used during consumer intervention
## read raw data from baseline
library(dplyr)
dta <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/baseline/data/raw/baseline_fixed_dups.csv")
### keep only clusters allocated to consumption intervention
##script that produces input for ODK to be used during consumer intervention
## read raw data from baseline
library(dplyr)
dta <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/baseline/data/raw/baseline_fixed_dups.csv")
head(dta)
##script that produces input for ODK to be used during consumer intervention
## read raw data from baseline
library(dplyr)
dta <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/baseline/data/raw/baseline_fixed_dups.csv")
parishes <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/midline/consumption_treatment/sampling_list/sample.csv")
dta <- dta[c("district","sub","village","farmer_ID","Check2.check.maize.name_resp","Check2.check.maize.nick","Check2.check.maize.phone","Check2.check.maize.phone2","Check2.check.maize._gps_latitude","Check2.check.maize._gps_longitude","trial_P","paid_pac","discounted")]
dta <- merge(dta, parishes[c("District","Sub_County","Village","Parish")], by.x = c("district","sub","village"), by.y=c("District","Sub_County","Village"), all.x=TRUE)
dta <- dta %>% arrange(district, sub, Parish, village, farmer_ID)
dta <- dta[c( "district", "sub","Parish", "village"    ,   "farmer_ID","P1_pric","cont", "trial_P","paid_pac","discounted",   "Check2.check.maize.name_resp" , "Check2.check.maize.nick", "Check2.check.maize.phone"   ,       "Check2.check.maize.phone2" ,"Check2.check.maize._gps_latitude"  ,"Check2.check.maize._gps_longitude" )  ]
#remove trailing and leading spaces
dta$Check2.check.maize.name_resp <- trimws(dta$Check2.check.maize.name_resp)
write.csv(dta, file = "to_upload_endline.csv")
##script that produces input for ODK to be used during consumer intervention
## read raw data from baseline
library(dplyr)
dta <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/baseline/data/raw/baseline_fixed_dups.csv")
parishes <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/midline/consumption_treatment/sampling_list/sample.csv")
dta <- dta[c("district","sub","village","farmer_ID","Check2.check.maize.name_resp","Check2.check.maize.nick","Check2.check.maize.phone","Check2.check.maize.phone2","Check2.check.maize._gps_latitude","Check2.check.maize._gps_longitude","trial_P","paid_pac","discounted","P1_pric","cont")]
dta <- merge(dta, parishes[c("District","Sub_County","Village","Parish")], by.x = c("district","sub","village"), by.y=c("District","Sub_County","Village"), all.x=TRUE)
dta <- dta %>% arrange(district, sub, Parish, village, farmer_ID)
dta <- dta[c( "district", "sub","Parish", "village"    ,   "farmer_ID","P1_pric","cont", "trial_P","paid_pac","discounted",   "Check2.check.maize.name_resp" , "Check2.check.maize.nick", "Check2.check.maize.phone"   ,       "Check2.check.maize.phone2" ,"Check2.check.maize._gps_latitude"  ,"Check2.check.maize._gps_longitude" )  ]
#remove trailing and leading spaces
dta$Check2.check.maize.name_resp <- trimws(dta$Check2.check.maize.name_resp)
write.csv(dta, file = "to_upload_endline.csv")
##script that produces input for ODK to be used during consumer intervention
## read raw data from baseline
library(dplyr)
dta <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/baseline/data/raw/baseline_fixed_dups.csv")
parishes <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/midline/consumption_treatment/sampling_list/sample.csv")
dta <- dta[c("district","sub","village","farmer_ID","Check2.check.maize.name_resp","Check2.check.maize.nick","Check2.check.maize.phone","Check2.check.maize.phone2","Check2.check.maize._gps_latitude","Check2.check.maize._gps_longitude","trial_P","paid_pac","discounted","P1_pric","cont")]
dta <- merge(dta, parishes[c("District","Sub_County","Village","Parish")], by.x = c("district","sub","village"), by.y=c("District","Sub_County","Village"), all.x=TRUE)
dta <- dta %>% arrange(district, sub, Parish, village, farmer_ID)
dta <- dta[c( "district", "sub","Parish", "village"    ,   "farmer_ID","P1_pric","cont", "trial_P","paid_pac","discounted",   "Check2.check.maize.name_resp" , "Check2.check.maize.nick", "Check2.check.maize.phone"   ,       "Check2.check.maize.phone2" ,"Check2.check.maize._gps_latitude"  ,"Check2.check.maize._gps_longitude" )  ]
#remove trailing and leading spaces
dta$Check2.check.maize.name_resp <- trimws(dta$Check2.check.maize.name_resp)
write.csv(dta, file = "to_upload_endline.csv", row.names=FALSE)
##script that produces input for ODK to be used during consumer intervention
## read raw data from baseline
library(dplyr)
dta <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/baseline/data/raw/baseline_fixed_dups.csv")
parishes <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/midline/consumption_treatment/sampling_list/sample.csv")
dta <- dta[c("district","sub","village","farmer_ID","Check2.check.maize.name_resp","Check2.check.maize.nick","Check2.check.maize.phone","Check2.check.maize.phone2","Check2.check.maize._gps_latitude","Check2.check.maize._gps_longitude","trial_P","paid_pac","discounted","cont")]
dta <- merge(dta, parishes[c("District","Sub_County","Village","Parish")], by.x = c("district","sub","village"), by.y=c("District","Sub_County","Village"), all.x=TRUE)
dta <- dta %>% arrange(district, sub, Parish, village, farmer_ID)
dta <- dta[c( "district", "sub","Parish", "village"    ,   "farmer_ID","cont", "trial_P","paid_pac","discounted",   "Check2.check.maize.name_resp" , "Check2.check.maize.nick", "Check2.check.maize.phone"   ,       "Check2.check.maize.phone2" ,"Check2.check.maize._gps_latitude"  ,"Check2.check.maize._gps_longitude" )  ]
#remove trailing and leading spaces
dta$Check2.check.maize.name_resp <- trimws(dta$Check2.check.maize.name_resp)
write.csv(dta, file = "to_upload_endline.csv", row.names=FALSE)
##script that produces input for ODK to be used during consumer intervention
## read raw data from baseline
library(dplyr)
dta <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/baseline/data/raw/baseline_fixed_dups.csv")
parishes <- read.csv("/home/bjvca/data/projects/OneCG/MIPP/midline/consumption_treatment/sampling_list/sample.csv")
dta <- dta[c("district","sub","village","farmer_ID","Check2.check.maize.name_resp","Check2.check.maize.nick","Check2.check.maize.phone","Check2.check.maize.phone2","Check2.check.maize._gps_latitude","Check2.check.maize._gps_longitude","trial_P","paid_pac","discounted","cont")]
dta <- merge(dta, parishes[c("District","Sub_County","Village","Parish")], by.x = c("district","sub","village"), by.y=c("District","Sub_County","Village"), all.x=TRUE)
dta <- dta %>% arrange(district, sub, Parish, village, farmer_ID)
dta <- dta[c( "district", "sub","Parish", "village"    ,   "farmer_ID","cont", "trial_P","paid_pac","discounted",   "Check2.check.maize.name_resp" , "Check2.check.maize.nick", "Check2.check.maize.phone"   ,       "Check2.check.maize.phone2" ,"Check2.check.maize._gps_latitude"  ,"Check2.check.maize._gps_longitude" )  ]
#remove trailing and leading spaces
dta$Check2.check.maize.name_resp <- trimws(dta$Check2.check.maize.name_resp)
write.csv(dta, file = "to_upload_endline.csv", row.names=FALSE)
setwd("~/data/projects/OneCG/MIPP/papers/seed_free_or_not")
rm(list=ls())
path <- getwd()
library(dplyr)
#to use vcovCR
library(clubSandwich)
### functions definitions
###2. Demean and divide outcomes by control group standard deviation (normalizes outcomes to be on comparable scale)
#https://github.com/cdsamii/make_index/blob/master/r/index_comparison.R
#function to standardize columns of matrix, sgroup = control group = logical vector
matStand <- function(x, sgroup = rep(TRUE, nrow(x))){
for(j in 1:ncol(x)){
x[,j] <- (x[,j] - mean(x[sgroup,j],na.rm = T))/sd(x[sgroup,j],na.rm = T)
}
return(x)
}
#function that takes in data in matrix format and returns IC weights and ICW index
#wgts argument: weights can be incorporated
#revcols argument: takes vector indicating which columns should have reversed values (standardized values * -1) prior to construction of index
#because: For all outcomes, switch signs where necessary so that the positive direction always indicates a "better" outcome.
icwIndex <- function(	xmat,
#wgts=rep(1, nrow(xmat)), #nrow: number of rows present in xmat --> many 1s
revcols = NULL,
sgroup = rep(TRUE, nrow(xmat))){
X <- matStand(xmat, sgroup)
if(length(revcols)>0){
X[,revcols] <-  -1*X[,revcols]
}
i.vec <- as.matrix(rep(1,ncol(xmat)))
#Sx <- cov.wt(X, wt=wgts)[[1]]
#list with estimates of the weighted covariance matrix and the mean of the data
Sx <- cov(X,use = "pairwise.complete.obs")
#cov: covariance of x and y if these are vectors/covariances between columns of x and columns of y are computed if these are matrices
#use = "everything" produces NAs for the index.
#use = "all.obs" produces an error.
#use = "complete.obs" and use = "na.or.complete": works, NAs are handled by casewise deletion.
#use = "pairwise.complete.obs": works, covariance between each pair of variables is computed using all complete pairs of observations on those variables
weights <- solve(t(i.vec)%*%solve(Sx)%*%i.vec)%*%t(i.vec)%*%solve(Sx)
index <- t(solve(t(i.vec)%*%solve(Sx)%*%i.vec)%*%t(i.vec)%*%solve(Sx)%*%t(X))
return(list(weights = weights, index = index))
}
trim <- function(var,dataset,trim_perc=.02){
dataset[var][dataset[var]<quantile(dataset[var],c(trim_perc/2,1-(trim_perc/2)),na.rm=T)[1]|dataset[var]>quantile(dataset[var],c(trim_perc/2,1-(trim_perc/2)),na.rm=T)[2]] <- NA
return(dataset)}
ihs <- function(x) {
y <- log(x + sqrt(x ^ 2 + 1))
return(y)}
path <- strsplit(path,"papers/seed_free_or_not")[[1]]
bse <- read.csv(paste(path,"baseline/data/public/baseline.csv",sep="/"))
bse$cluster_ID <- as.factor(paste(paste(bse$distID,bse$subID, sep="_"), bse$vilID, sep="_"))
## for this paper, keep only the 1000 or so obs that received seed for free (and are not allocated to crossed treatment), paid for seed or paid and got discount
bse <- subset(bse, (trial_P==TRUE | paid_pac==TRUE | discounted == TRUE) & cont == FALSE)
bse$age_head <- as.numeric(as.character(bse$age))
bse$prim_head <-bse$edu %in% c("c","d","e","f")
bse$male_head <- bse$gender == "Male"
bse$hh_size <- as.numeric(as.character(bse$hh_size))
bse$dist_ag <- as.numeric(as.character(bse$dist_ag))
bse$quality_use <- bse$quality_use=="Yes"
bse$bazooka_use_rand <- bse$maize_var=="Bazooka"
bse$source_rand <- bse$source %in%  letters[seq( from = 4, to = 9 )]
bse$often_rand <-  bse$often %in%  letters[seq( from = 1, to = 5 )]
bse$bag_harv[bse$bag_harv == "999"] <- NA
bse$prod_rand <-  as.numeric(as.character(bse$bag_harv))* as.numeric(as.character(bse$bag_kg))
bse$acre_rand <- as.numeric(as.character(bse$plot_size))
bse$yield_rand <- bse$prod_rand/bse$acre_rand
bse <- trim("yield_rand",bse,trim_perc=.01)
bse$yield_rand_ihs <- ihs(bse$yield_rand )
###balance table
#iterate over outcomes
outcomes <- c("age_head","prim_head","male_head","hh_size","dist_ag","quality_use","bazooka_use_rand","source_rand","often_rand","yield_rand_ihs" )
#matrix to store results
res_tab <-  array(NA,dim=c(3,4,length(outcomes)))
res_tab[1,1,1:length(outcomes)] <- colMeans(bse[bse$trial_P==TRUE,outcomes], na.rm=T)
res_tab[2,1,1:length(outcomes)] <- apply(bse[bse$trial_P==TRUE,outcomes], 2, sd, na.rm=T)
for (i in 1:length(outcomes)) {
### pooled regression (for marginal effects)
ols <- lm(as.formula( paste(outcomes[i],"paid_pac+discounted",sep="~")), data=bse)
vcov_cluster <- vcovCR(ols,cluster=bse$cluster_ID,type="CR3")
res_tab[1,2,i]  <- coef_test(ols, vcov_cluster)$beta[2]
res_tab[2,2,i] <- coef_test(ols, vcov_cluster)$SE[2]
res_tab[3,2,i] <- coef_test(ols, vcov_cluster)$p_Satt[2]
res_tab[1,3,i]  <- coef_test(ols, vcov_cluster)$beta[3]
res_tab[2,3,i] <- coef_test(ols, vcov_cluster)$SE[3]
res_tab[3,3,i] <- coef_test(ols, vcov_cluster)$p_Satt[3]
res_tab[1,4,i] <- nobs(ols)
}
base_balance <- round(res_tab,digits=3)
#res_tab <- round(res_tab,digits=3)
save(base_balance, file=paste(path,"papers/seed_free_or_not/base_balance.Rdata",sep="/"))
### here analysis of midline data starts
dta <- read.csv(paste(path,"midline/data/public/midline.csv",sep="/"))
dim(dta)
head(dta)
table(dta$trial_P)
table(dta$discounted)
table(dta$paid_pac)
